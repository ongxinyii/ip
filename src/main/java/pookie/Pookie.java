package pookie;

import pookie.command.Parser;
import pookie.exception.PookieException;
import pookie.list.TaskList;
import pookie.storage.Storage;
import pookie.ui.Ui;

/**
 * The main logic handler for the Pookie chatbot application.
 * It manages task storage, parsing commands, and returning responses.
 */
public class Pookie {

    private static final String DEFAULT_FILE_PATH = System.getProperty("user.dir") + "/data/pookie.txt";

    private final Storage storage;
    private final TaskList tasks;
    private final Ui ui;
    private final Parser parser;

    /**
     * Constructs a Pookie chatbot instance with a specified file path.
     *
     * @param filePath The file path to store and load tasks.
     */
    public Pookie(String filePath) {
        assert filePath != null && !filePath.isEmpty() : "File path must not be null or empty";

        ui = new Ui();
        storage = new Storage(filePath);
        parser = new Parser();

        System.out.println("Loading tasks from: " + DEFAULT_FILE_PATH);

        TaskList loadedTasks;
        try {
            loadedTasks = new TaskList(storage.loadTasks()); // This can throw PookieException
        } catch (PookieException e) {
            ui.showLoadingError();
            loadedTasks = new TaskList(); // If an error occurs, initialize with an empty list
        }
        this.tasks = loadedTasks;
    }

    /**
     * Constructs a Pookie chatbot instance using the default file path.
     * Required for JavaFX integration.
     */
    public Pookie() {
        this(DEFAULT_FILE_PATH);
    }

    /**
     * Processes user input and returns Pookie's response.
     *
     * @param input The user input command.
     * @return A string response generated by Pookie.
     */
    public String getResponse(String input) {
        try {
            return parser.parseCommandAndReturn(input, tasks, ui, storage);
        } catch (PookieException e) {
            return "OOPS!!! " + e.getMessage();
        }
    }

    /**
     * Runs the main event loop of the chatbot (CLI mode).
     * Continuously reads and processes user commands.
     */
    public void run() {
        ui.showWelcome();
        while (true) {
            String input = ui.readCommand();
            try {
                parser.parseCommand(input, tasks, ui, storage);
            } catch (PookieException e) {
                ui.showError(e.getMessage());
            }
        }
    }

    /**
     * The main method to start the chatbot application in CLI mode.
     *
     * @param args Command-line arguments (not used).
     */
    public static void main(String[] args) {
        new Pookie().run();
    }
}

